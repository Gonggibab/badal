// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique 
  role          Role      @default(USER)
  cart          Cart?
  review        Review[]
}

model Product {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String    @unique
  price         Int
  images        Image[]
  detailImage   DetailImage?
  options       Option[]
  cartItem      CartItem[]
  review        Review[]
}

model Option {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  product       Product   @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId     String    @db.ObjectId
  optionItems   OptionItem[]
}

model OptionItem {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  value         Int
  stock         Int
  option        Option    @relation(fields: [optionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  optionId      String    @db.ObjectId
}

model Cart {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId        String    @unique @db.ObjectId
  items         CartItem[]
}

model CartItem {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  cart          Cart      @relation(fields: [cartId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  cartId        String    @db.ObjectId
  product       Product   @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId     String    @db.ObjectId
  title         String
  image         String
  price         Int
  quantity      Int
  createdAt     DateTime  @default(now())

  @@unique([cartId, title])
}

model Review {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId        String    @db.ObjectId
  product       Product   @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId     String    @db.ObjectId
  rating        Int
  content       String
  images        Image[]
  createdAt     DateTime  @default(now())

  @@unique([productId, userId])
}

enum Role {
  USER
  ADMIN
}

model Image {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  asset_id        String
  public_id       String    @unique
  signature       String
  url             String
  secure_url      String
  createdAt       DateTime  @default(now())
  product         Product?  @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId       String?   @db.ObjectId  
  review          Review?   @relation(fields: [reviewId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  reviewId        String?   @db.ObjectId
}

model DetailImage {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  asset_id        String
  public_id       String    @unique
  signature       String
  url             String
  secure_url      String
  createdAt       DateTime  @default(now())
  product         Product   @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId       String    @unique @db.ObjectId  
}