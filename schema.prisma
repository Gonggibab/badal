// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique 
  role          Role      @default(USER)
  cart          Cart?
  reviews       Review[]
  orders        Order[]
  address       Address[]
}

model Product {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String    @unique
  price         Int
  stock         Int       @default(0)
  images        Image[]
  detailImage   DetailImage?
  cartItems     CartItem[]
  reviews       Review[]
}

model Review {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  user          User        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId        String      @db.ObjectId
  product       Product     @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId     String      @db.ObjectId
  rating        Int
  content       String
  images        Image[]
  createdAt     DateTime    @default(now())

  @@unique([productId, userId])
}

model Image {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  asset_id        String
  public_id       String    @unique
  signature       String
  url             String
  secure_url      String
  createdAt       DateTime  @default(now())
  product         Product?  @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId       String?   @db.ObjectId  
  review          Review?   @relation(fields: [reviewId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  reviewId        String?   @db.ObjectId
}

model DetailImage {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  asset_id        String
  public_id       String    @unique
  signature       String
  url             String
  secure_url      String
  createdAt       DateTime  @default(now())
  product         Product   @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId       String    @unique @db.ObjectId  
}

model Cart {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  user          User        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId        String      @unique @db.ObjectId
  items         CartItem[]
}

model CartItem {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  product       Product     @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId     String      @db.ObjectId
  cart          Cart        @relation(fields: [cartId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  cartId        String      @db.ObjectId
  title         String
  image         String?
  price         Int
  quantity      Int
  createdAt     DateTime    @default(now())

  @@unique([cartId, title])
}

model Address {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  isDefault     Boolean    @default(false)
  postcode      String
  address       String
  detailAddress String
  name          String
  contact       String
  memo          String
  user          User?      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId        String?    @db.ObjectId
  orders        Order[]
}

enum OrderStatus {
  READY
  IN_DELIVERY
  DONE
  CANCLED
  RETURN_REQUESTED
  RETURN_COMPLETE
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String      @unique
  paymentKey    String      @unique
  status        OrderStatus @default(READY)
  title         String
  price         Int
  image         String?
  user          User?       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  userId        String?     @db.ObjectId
  address       Address     @relation(fields: [addressId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  addressId     String      @db.ObjectId
  orderItems    OrderItem[]
  createdAt     DateTime    @default(now())
}

model OrderItem {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  price         Int
  quantity      Int
  image         String?
  order         Order       @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderId       String      @db.ObjectId
}
